// <auto-generated />
using System;
using CoreManagerSP.API.CoreManager.Infrastructure.Configurations;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CoreManagerSP.API.Migrations
{
    [DbContext(typeof(CoreManagerDbContext))]
    partial class CoreManagerDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CoreManagerSP.API.CoreManager.Domain.Entities.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ContrasenaHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Administradores");
                });

            modelBuilder.Entity("CoreManagerSP.API.CoreManager.Domain.Entities.AnalisisResultado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("CuotaMensualEstimada")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("EntidadFinancieraId")
                        .HasColumnType("int");

                    b.Property<bool>("EsApto")
                        .HasColumnType("bit");

                    b.Property<string>("MensajeResumen")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<decimal>("ProbabilidadAprobacion")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SolicitudPrestamoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EntidadFinancieraId");

                    b.HasIndex("SolicitudPrestamoId");

                    b.ToTable("AnalisisResultados");
                });

            modelBuilder.Entity("CoreManagerSP.API.CoreManager.Domain.Entities.EntidadFinanciera", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("AceptaMora")
                        .HasColumnType("bit");

                    b.Property<int>("AntiguedadHistorialMinima")
                        .HasColumnType("int");

                    b.Property<decimal>("IngresoMinimo")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("RelacionCuotaIngresoMaxima")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("RequiereTarjetaCredito")
                        .HasColumnType("bit");

                    b.Property<decimal>("TasaInteres")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("EntidadesFinancieras");
                });

            modelBuilder.Entity("CoreManagerSP.API.CoreManager.Domain.Entities.EntidadTipoPrestamo", b =>
                {
                    b.Property<int>("EntidadFinancieraId")
                        .HasColumnType("int");

                    b.Property<int>("TipoPrestamoId")
                        .HasColumnType("int");

                    b.HasKey("EntidadFinancieraId", "TipoPrestamoId");

                    b.HasIndex("TipoPrestamoId");

                    b.ToTable("EntidadesTipoPrestamo");
                });

            modelBuilder.Entity("CoreManagerSP.API.CoreManager.Domain.Entities.HistorialMejoras", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("FechaAplicacion")
                        .HasColumnType("datetime2");

                    b.Property<int>("SolicitudPrestamoId")
                        .HasColumnType("int");

                    b.Property<string>("ValorAnterior")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ValorNuevo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VariableModificada")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("SolicitudPrestamoId");

                    b.ToTable("HistorialMejoras");
                });

            modelBuilder.Entity("CoreManagerSP.API.CoreManager.Domain.Entities.LogSistema", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<string>("Mensaje")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("LogsSistema");
                });

            modelBuilder.Entity("CoreManagerSP.API.CoreManager.Domain.Entities.MejoraSugerida", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AnalisisResultadoId")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("EsObligatoria")
                        .HasColumnType("bit");

                    b.Property<string>("ImpactoEstimado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Prioridad")
                        .HasColumnType("int");

                    b.Property<string>("ValorSugerido")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Variable")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AnalisisResultadoId");

                    b.ToTable("MejorasSugeridas");
                });

            modelBuilder.Entity("CoreManagerSP.API.CoreManager.Domain.Entities.SolicitudPrestamo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("CuotaEstimadaCliente")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaSolicitud")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Monto")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Plazo")
                        .HasColumnType("int");

                    b.Property<string>("Proposito")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("TipoPrestamoId")
                        .HasColumnType("int");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TipoPrestamoId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Solicitudes");
                });

            modelBuilder.Entity("CoreManagerSP.API.CoreManager.Domain.Entities.TipoPrestamo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("CuotaMinima")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("OtrosRequisitos")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TasaBase")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TipoGeneral")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TiposPrestamo");
                });

            modelBuilder.Entity("CoreManagerSP.API.CoreManager.Domain.Entities.TokenAdmin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdminId")
                        .HasColumnType("int");

                    b.Property<bool>("EstaActivo")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaExpiracion")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.ToTable("TokenAdmins", (string)null);
                });

            modelBuilder.Entity("CoreManagerSP.API.CoreManager.Domain.Entities.TokenUsuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("EstaActivo")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaExpiracion")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("TokenUsuarios");
                });

            modelBuilder.Entity("CoreManagerSP.API.CoreManager.Domain.Entities.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AniosHistorialCrediticio")
                        .HasColumnType("int");

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Contrasena")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("CuotasMensualesComprometidas")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DeudasVigentes")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("datetime2");

                    b.Property<bool>("HaTenidoMora")
                        .HasColumnType("bit");

                    b.Property<decimal>("Ingreso")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("NivelHistorialCrediticio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("NumeroCreditosActivos")
                        .HasColumnType("int");

                    b.Property<bool>("TarjetaCredito")
                        .HasColumnType("bit");

                    b.Property<string>("TiempoUltimoIncumplimiento")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("CoreManagerSP.API.CoreManager.Domain.Entities.AnalisisResultado", b =>
                {
                    b.HasOne("CoreManagerSP.API.CoreManager.Domain.Entities.EntidadFinanciera", "EntidadFinanciera")
                        .WithMany("AnalisisResultados")
                        .HasForeignKey("EntidadFinancieraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreManagerSP.API.CoreManager.Domain.Entities.SolicitudPrestamo", "SolicitudPrestamo")
                        .WithMany("AnalisisResultados")
                        .HasForeignKey("SolicitudPrestamoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EntidadFinanciera");

                    b.Navigation("SolicitudPrestamo");
                });

            modelBuilder.Entity("CoreManagerSP.API.CoreManager.Domain.Entities.EntidadTipoPrestamo", b =>
                {
                    b.HasOne("CoreManagerSP.API.CoreManager.Domain.Entities.EntidadFinanciera", "EntidadFinanciera")
                        .WithMany("EntidadesTipoPrestamo")
                        .HasForeignKey("EntidadFinancieraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreManagerSP.API.CoreManager.Domain.Entities.TipoPrestamo", "TipoPrestamo")
                        .WithMany("EntidadesTipoPrestamo")
                        .HasForeignKey("TipoPrestamoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EntidadFinanciera");

                    b.Navigation("TipoPrestamo");
                });

            modelBuilder.Entity("CoreManagerSP.API.CoreManager.Domain.Entities.HistorialMejoras", b =>
                {
                    b.HasOne("CoreManagerSP.API.CoreManager.Domain.Entities.SolicitudPrestamo", "SolicitudPrestamo")
                        .WithMany()
                        .HasForeignKey("SolicitudPrestamoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SolicitudPrestamo");
                });

            modelBuilder.Entity("CoreManagerSP.API.CoreManager.Domain.Entities.LogSistema", b =>
                {
                    b.HasOne("CoreManagerSP.API.CoreManager.Domain.Entities.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("CoreManagerSP.API.CoreManager.Domain.Entities.MejoraSugerida", b =>
                {
                    b.HasOne("CoreManagerSP.API.CoreManager.Domain.Entities.AnalisisResultado", "AnalisisResultado")
                        .WithMany("MejorasSugeridas")
                        .HasForeignKey("AnalisisResultadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AnalisisResultado");
                });

            modelBuilder.Entity("CoreManagerSP.API.CoreManager.Domain.Entities.SolicitudPrestamo", b =>
                {
                    b.HasOne("CoreManagerSP.API.CoreManager.Domain.Entities.TipoPrestamo", "TipoPrestamo")
                        .WithMany("Solicitudes")
                        .HasForeignKey("TipoPrestamoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreManagerSP.API.CoreManager.Domain.Entities.Usuario", "Usuario")
                        .WithMany("Solicitudes")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TipoPrestamo");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("CoreManagerSP.API.CoreManager.Domain.Entities.TokenAdmin", b =>
                {
                    b.HasOne("CoreManagerSP.API.CoreManager.Domain.Entities.Admin", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("CoreManagerSP.API.CoreManager.Domain.Entities.TokenUsuario", b =>
                {
                    b.HasOne("CoreManagerSP.API.CoreManager.Domain.Entities.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("CoreManagerSP.API.CoreManager.Domain.Entities.AnalisisResultado", b =>
                {
                    b.Navigation("MejorasSugeridas");
                });

            modelBuilder.Entity("CoreManagerSP.API.CoreManager.Domain.Entities.EntidadFinanciera", b =>
                {
                    b.Navigation("AnalisisResultados");

                    b.Navigation("EntidadesTipoPrestamo");
                });

            modelBuilder.Entity("CoreManagerSP.API.CoreManager.Domain.Entities.SolicitudPrestamo", b =>
                {
                    b.Navigation("AnalisisResultados");
                });

            modelBuilder.Entity("CoreManagerSP.API.CoreManager.Domain.Entities.TipoPrestamo", b =>
                {
                    b.Navigation("EntidadesTipoPrestamo");

                    b.Navigation("Solicitudes");
                });

            modelBuilder.Entity("CoreManagerSP.API.CoreManager.Domain.Entities.Usuario", b =>
                {
                    b.Navigation("Solicitudes");
                });
#pragma warning restore 612, 618
        }
    }
}
